# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tug_navigation_tools/parking_positionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class parking_positionRequest(genpy.Message):
  _md5sum = "68b34e16807f733f1339ca745bc48a1b"
  _type = "tug_navigation_tools/parking_positionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# x-position of the table
float64 x

# y-position of the table
float64 y

# distance between border of table and Eisenschwein
float64 distance

"""
  __slots__ = ['x','y','distance']
  _slot_types = ['float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(parking_positionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.distance is None:
        self.distance = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x, _x.y, _x.distance,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x, _x.y, _x.distance,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tug_navigation_tools/parking_positionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class parking_positionResponse(genpy.Message):
  _md5sum = "8a9fe4115560c8688867b11b9f935c33"
  _type = "tug_navigation_tools/parking_positionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# parking position of the Eisenschwein, only valid if position_found is true
geometry_msgs/Pose new_parking_position

# information whether a potential parking position was found or not
bool position_found


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['new_parking_position','position_found']
  _slot_types = ['geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       new_parking_position,position_found

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(parking_positionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.new_parking_position is None:
        self.new_parking_position = geometry_msgs.msg.Pose()
      if self.position_found is None:
        self.position_found = False
    else:
      self.new_parking_position = geometry_msgs.msg.Pose()
      self.position_found = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7dB().pack(_x.new_parking_position.position.x, _x.new_parking_position.position.y, _x.new_parking_position.position.z, _x.new_parking_position.orientation.x, _x.new_parking_position.orientation.y, _x.new_parking_position.orientation.z, _x.new_parking_position.orientation.w, _x.position_found))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.new_parking_position is None:
        self.new_parking_position = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.new_parking_position.position.x, _x.new_parking_position.position.y, _x.new_parking_position.position.z, _x.new_parking_position.orientation.x, _x.new_parking_position.orientation.y, _x.new_parking_position.orientation.z, _x.new_parking_position.orientation.w, _x.position_found,) = _get_struct_7dB().unpack(str[start:end])
      self.position_found = bool(self.position_found)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7dB().pack(_x.new_parking_position.position.x, _x.new_parking_position.position.y, _x.new_parking_position.position.z, _x.new_parking_position.orientation.x, _x.new_parking_position.orientation.y, _x.new_parking_position.orientation.z, _x.new_parking_position.orientation.w, _x.position_found))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.new_parking_position is None:
        self.new_parking_position = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.new_parking_position.position.x, _x.new_parking_position.position.y, _x.new_parking_position.position.z, _x.new_parking_position.orientation.x, _x.new_parking_position.orientation.y, _x.new_parking_position.orientation.z, _x.new_parking_position.orientation.w, _x.position_found,) = _get_struct_7dB().unpack(str[start:end])
      self.position_found = bool(self.position_found)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
class parking_position(object):
  _type          = 'tug_navigation_tools/parking_position'
  _md5sum = '9cccc68cdb448b7a1440e1b408ee11bd'
  _request_class  = parking_positionRequest
  _response_class = parking_positionResponse
