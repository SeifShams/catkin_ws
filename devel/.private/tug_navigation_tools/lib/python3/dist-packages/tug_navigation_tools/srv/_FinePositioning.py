# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tug_navigation_tools/FinePositioningRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FinePositioningRequest(genpy.Message):
  _md5sum = "54d2ff4bee42cc5981d182691496ff5b"
  _type = "tug_navigation_tools/FinePositioningRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# indicator on which side of the Eisenschwein the wall is positioned: 1 = starboard; -1 = port 
int64 wall_position

# distance between border of table and Eisenschwein
float64 goal_distance
float64 initial_distance

"""
  __slots__ = ['wall_position','goal_distance','initial_distance']
  _slot_types = ['int64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wall_position,goal_distance,initial_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FinePositioningRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wall_position is None:
        self.wall_position = 0
      if self.goal_distance is None:
        self.goal_distance = 0.
      if self.initial_distance is None:
        self.initial_distance = 0.
    else:
      self.wall_position = 0
      self.goal_distance = 0.
      self.initial_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2d().pack(_x.wall_position, _x.goal_distance, _x.initial_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wall_position, _x.goal_distance, _x.initial_distance,) = _get_struct_q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2d().pack(_x.wall_position, _x.goal_distance, _x.initial_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wall_position, _x.goal_distance, _x.initial_distance,) = _get_struct_q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q2d = None
def _get_struct_q2d():
    global _struct_q2d
    if _struct_q2d is None:
        _struct_q2d = struct.Struct("<q2d")
    return _struct_q2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tug_navigation_tools/FinePositioningResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FinePositioningResponse(genpy.Message):
  _md5sum = "80204a6ff2622a7071680d5597cbd3aa"
  _type = "tug_navigation_tools/FinePositioningResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# returns whether position was reached successfully
bool reached

"""
  __slots__ = ['reached']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reached

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FinePositioningResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reached is None:
        self.reached = False
    else:
      self.reached = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.reached
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.reached,) = _get_struct_B().unpack(str[start:end])
      self.reached = bool(self.reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.reached
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.reached,) = _get_struct_B().unpack(str[start:end])
      self.reached = bool(self.reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class FinePositioning(object):
  _type          = 'tug_navigation_tools/FinePositioning'
  _md5sum = '171c107e3dd8cdfa8ae691b15d06b1d1'
  _request_class  = FinePositioningRequest
  _response_class = FinePositioningResponse
