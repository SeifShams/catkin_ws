// Generated by gencpp from file tug_neo_locate_station/LocateStationResponse.msg
// DO NOT EDIT!


#ifndef TUG_NEO_LOCATE_STATION_MESSAGE_LOCATESTATIONRESPONSE_H
#define TUG_NEO_LOCATE_STATION_MESSAGE_LOCATESTATIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tug_neo_locate_station
{
template <class ContainerAllocator>
struct LocateStationResponse_
{
  typedef LocateStationResponse_<ContainerAllocator> Type;

  LocateStationResponse_()
    : reached(false)  {
    }
  LocateStationResponse_(const ContainerAllocator& _alloc)
    : reached(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reached_type;
  _reached_type reached;





  typedef boost::shared_ptr< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LocateStationResponse_

typedef ::tug_neo_locate_station::LocateStationResponse_<std::allocator<void> > LocateStationResponse;

typedef boost::shared_ptr< ::tug_neo_locate_station::LocateStationResponse > LocateStationResponsePtr;
typedef boost::shared_ptr< ::tug_neo_locate_station::LocateStationResponse const> LocateStationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator1> & lhs, const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reached == rhs.reached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator1> & lhs, const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tug_neo_locate_station

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80204a6ff2622a7071680d5597cbd3aa";
  }

  static const char* value(const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80204a6ff2622a70ULL;
  static const uint64_t static_value2 = 0x71680d5597cbd3aaULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_neo_locate_station/LocateStationResponse";
  }

  static const char* value(const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# returns whether position was reached successfully\n"
"bool reached\n"
"\n"
;
  }

  static const char* value(const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocateStationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_neo_locate_station::LocateStationResponse_<ContainerAllocator>& v)
  {
    s << indent << "reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_NEO_LOCATE_STATION_MESSAGE_LOCATESTATIONRESPONSE_H
