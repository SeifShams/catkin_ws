// Generated by gencpp from file tug_navigation_tools/calculate_rotation.msg
// DO NOT EDIT!


#ifndef TUG_NAVIGATION_TOOLS_MESSAGE_CALCULATE_ROTATION_H
#define TUG_NAVIGATION_TOOLS_MESSAGE_CALCULATE_ROTATION_H

#include <ros/service_traits.h>


#include <tug_navigation_tools/calculate_rotationRequest.h>
#include <tug_navigation_tools/calculate_rotationResponse.h>


namespace tug_navigation_tools
{

struct calculate_rotation
{

typedef calculate_rotationRequest Request;
typedef calculate_rotationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct calculate_rotation
} // namespace tug_navigation_tools


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::tug_navigation_tools::calculate_rotation > {
  static const char* value()
  {
    return "d61b10bf9711ffd345b1e65c96b513fa";
  }

  static const char* value(const ::tug_navigation_tools::calculate_rotation&) { return value(); }
};

template<>
struct DataType< ::tug_navigation_tools::calculate_rotation > {
  static const char* value()
  {
    return "tug_navigation_tools/calculate_rotation";
  }

  static const char* value(const ::tug_navigation_tools::calculate_rotation&) { return value(); }
};


// service_traits::MD5Sum< ::tug_navigation_tools::calculate_rotationRequest> should match
// service_traits::MD5Sum< ::tug_navigation_tools::calculate_rotation >
template<>
struct MD5Sum< ::tug_navigation_tools::calculate_rotationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::tug_navigation_tools::calculate_rotation >::value();
  }
  static const char* value(const ::tug_navigation_tools::calculate_rotationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::tug_navigation_tools::calculate_rotationRequest> should match
// service_traits::DataType< ::tug_navigation_tools::calculate_rotation >
template<>
struct DataType< ::tug_navigation_tools::calculate_rotationRequest>
{
  static const char* value()
  {
    return DataType< ::tug_navigation_tools::calculate_rotation >::value();
  }
  static const char* value(const ::tug_navigation_tools::calculate_rotationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::tug_navigation_tools::calculate_rotationResponse> should match
// service_traits::MD5Sum< ::tug_navigation_tools::calculate_rotation >
template<>
struct MD5Sum< ::tug_navigation_tools::calculate_rotationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::tug_navigation_tools::calculate_rotation >::value();
  }
  static const char* value(const ::tug_navigation_tools::calculate_rotationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::tug_navigation_tools::calculate_rotationResponse> should match
// service_traits::DataType< ::tug_navigation_tools::calculate_rotation >
template<>
struct DataType< ::tug_navigation_tools::calculate_rotationResponse>
{
  static const char* value()
  {
    return DataType< ::tug_navigation_tools::calculate_rotation >::value();
  }
  static const char* value(const ::tug_navigation_tools::calculate_rotationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // TUG_NAVIGATION_TOOLS_MESSAGE_CALCULATE_ROTATION_H
