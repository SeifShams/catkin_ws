// Generated by gencpp from file tug_navigation_tools/parking_positionResponse.msg
// DO NOT EDIT!


#ifndef TUG_NAVIGATION_TOOLS_MESSAGE_PARKING_POSITIONRESPONSE_H
#define TUG_NAVIGATION_TOOLS_MESSAGE_PARKING_POSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace tug_navigation_tools
{
template <class ContainerAllocator>
struct parking_positionResponse_
{
  typedef parking_positionResponse_<ContainerAllocator> Type;

  parking_positionResponse_()
    : new_parking_position()
    , position_found(false)  {
    }
  parking_positionResponse_(const ContainerAllocator& _alloc)
    : new_parking_position(_alloc)
    , position_found(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _new_parking_position_type;
  _new_parking_position_type new_parking_position;

   typedef uint8_t _position_found_type;
  _position_found_type position_found;





  typedef boost::shared_ptr< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct parking_positionResponse_

typedef ::tug_navigation_tools::parking_positionResponse_<std::allocator<void> > parking_positionResponse;

typedef boost::shared_ptr< ::tug_navigation_tools::parking_positionResponse > parking_positionResponsePtr;
typedef boost::shared_ptr< ::tug_navigation_tools::parking_positionResponse const> parking_positionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator1> & lhs, const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.new_parking_position == rhs.new_parking_position &&
    lhs.position_found == rhs.position_found;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator1> & lhs, const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tug_navigation_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a9fe4115560c8688867b11b9f935c33";
  }

  static const char* value(const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a9fe4115560c868ULL;
  static const uint64_t static_value2 = 0x8867b11b9f935c33ULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_navigation_tools/parking_positionResponse";
  }

  static const char* value(const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# parking position of the Eisenschwein, only valid if position_found is true\n"
"geometry_msgs/Pose new_parking_position\n"
"\n"
"# information whether a potential parking position was found or not\n"
"bool position_found\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_parking_position);
      stream.next(m.position_found);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parking_positionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_navigation_tools::parking_positionResponse_<ContainerAllocator>& v)
  {
    s << indent << "new_parking_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.new_parking_position);
    s << indent << "position_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_found);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_NAVIGATION_TOOLS_MESSAGE_PARKING_POSITIONRESPONSE_H
