// Generated by gencpp from file tug_navigation_tools/FinePositioningRequest.msg
// DO NOT EDIT!


#ifndef TUG_NAVIGATION_TOOLS_MESSAGE_FINEPOSITIONINGREQUEST_H
#define TUG_NAVIGATION_TOOLS_MESSAGE_FINEPOSITIONINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tug_navigation_tools
{
template <class ContainerAllocator>
struct FinePositioningRequest_
{
  typedef FinePositioningRequest_<ContainerAllocator> Type;

  FinePositioningRequest_()
    : wall_position(0)
    , goal_distance(0.0)
    , initial_distance(0.0)  {
    }
  FinePositioningRequest_(const ContainerAllocator& _alloc)
    : wall_position(0)
    , goal_distance(0.0)
    , initial_distance(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _wall_position_type;
  _wall_position_type wall_position;

   typedef double _goal_distance_type;
  _goal_distance_type goal_distance;

   typedef double _initial_distance_type;
  _initial_distance_type initial_distance;





  typedef boost::shared_ptr< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FinePositioningRequest_

typedef ::tug_navigation_tools::FinePositioningRequest_<std::allocator<void> > FinePositioningRequest;

typedef boost::shared_ptr< ::tug_navigation_tools::FinePositioningRequest > FinePositioningRequestPtr;
typedef boost::shared_ptr< ::tug_navigation_tools::FinePositioningRequest const> FinePositioningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator1> & lhs, const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.wall_position == rhs.wall_position &&
    lhs.goal_distance == rhs.goal_distance &&
    lhs.initial_distance == rhs.initial_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator1> & lhs, const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tug_navigation_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54d2ff4bee42cc5981d182691496ff5b";
  }

  static const char* value(const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54d2ff4bee42cc59ULL;
  static const uint64_t static_value2 = 0x81d182691496ff5bULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_navigation_tools/FinePositioningRequest";
  }

  static const char* value(const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# indicator on which side of the Eisenschwein the wall is positioned: 1 = starboard; -1 = port \n"
"int64 wall_position\n"
"\n"
"# distance between border of table and Eisenschwein\n"
"float64 goal_distance\n"
"float64 initial_distance\n"
"\n"
;
  }

  static const char* value(const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wall_position);
      stream.next(m.goal_distance);
      stream.next(m.initial_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FinePositioningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_navigation_tools::FinePositioningRequest_<ContainerAllocator>& v)
  {
    s << indent << "wall_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.wall_position);
    s << indent << "goal_distance: ";
    Printer<double>::stream(s, indent + "  ", v.goal_distance);
    s << indent << "initial_distance: ";
    Printer<double>::stream(s, indent + "  ", v.initial_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_NAVIGATION_TOOLS_MESSAGE_FINEPOSITIONINGREQUEST_H
